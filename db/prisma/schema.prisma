generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  INITIAL // on create
  REDIRECTED
  AUTHORIZATION_REQUESTED
  AUTHORIZED
  CAPTURE_REQUESTED
  CAPTURED
  REFUND_REQUESTED
  REFUNDED
  FAILED
  IN_REVIEW
}

enum States {
  DEFAULT
  PROCESSING
}

enum Modes {
  SALE
  PRE_AUTHORIZATION
  FINAL_AUTHORIZATION
}

model payments {
  id               String   @id @default(uuid())
  authMode         Modes
  paymentId        String
  worldlineId      String
  storeId          String   @db.VarChar(255)
  cartId           String   @db.VarChar(255)
  orderId          String   @db.VarChar(255)
  status           Status   @default(INITIAL)
  state            States   @default(DEFAULT)
  storePermanently Boolean  @default(false)
  errors           String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model payment_references {
  id          String   @id @default(uuid())
  storeId     String   @db.VarChar(255)
  version     Int
  referenceId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique(storeId)
}

model payment_transactions {
  id            String   @id @default(uuid())
  status        String?   @db.Text
  paymentId     String
  worldlineId   String
  storeId       String   @db.VarChar(255)
  orderId       String   @db.VarChar(255)
  amount        Int
  type          String?   @db.Text
  errors        String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model customer_payment_tokens {
  id         String   @id @default(uuid())
  customerId String
  paymentId  String
  title      String
  token      String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
